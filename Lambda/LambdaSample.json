{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "Template for Lambda Sample.",
    "Parameters": {
        "EnvName": {
            "Description": "Name of an environment. 'dev', 'staging', 'prod' and any name.",
            "Type": "String",
            "AllowedPattern": "^.*[^0-9]$",
            "ConstraintDescription": "Must end with non-numeric character."
        },
        "LambdaHandlerPath": {
            "Description": "Path of a Lambda Handler.",
            "Type": "String",
            "AllowedPattern": "^.*[^0-9]$",
            "ConstraintDescription": "Must end with non-numeric character."
        }
    },
    "Resources": {
        "LambdaRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "RoleName": "lambda-role",
                "AssumeRolePolicyDocument": {
                    "Statement": [
                        {
                            "Action": [
                                "sts:AssumeRole"
                            ],
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            }
                        }
                    ],
                    "Version": "2012-10-17"
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/AWSLambdaExecute",
                    "arn:aws:iam::aws:policy/AmazonS3FullAccess",
                    "arn:aws:iam::aws:policy/AmazonDynamoDBFullAccess",
                    "arn:aws:iam::aws:policy/AmazonKinesisFullAccess"
                ],
                "Path": "/"
            }
        },
        "LambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Metadata": {
                "guard": {
                    "SuppressedRules": [
                        "LAMBDA_INSIDE_VPC",
                        "LAMBDA_FUNCTION_PUBLIC_ACCESS_PROHIBITED"
                    ]
                }
            },
            "Properties": {
                "FunctionName": {
                    "Fn::Sub": "lambda-function-${EnvName}"
                },
                "Description": "LambdaFunction using python3.12.",
                "Runtime": "python3.12",
                "Code": {
                    "ZipFile": "import json\n\ndef lambda_handler(event, context):\n    print(json.dumps(event))\n    return {\n        'statusCode': 200,\n        'body': json.dumps('Hello from Lambda!')\n    }\n"
                },
                "Handler": {
                    "Fn::Sub": "${LambdaHandlerPath}"
                },
                "MemorySize": 128,
                "Timeout": 10,
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaRole",
                        "Arn"
                    ]
                },
                "Environment": {
                    "Variables": {
                        "ENV": {
                            "Ref": "EnvName"
                        },
                        "TZ": "UTC"
                    }
                }
            }
        }
    },
    "Outputs": {
        "LambdaRoleARN": {
            "Description": "Role for Lambda execution.",
            "Value": {
                "Fn::GetAtt": [
                    "LambdaRole",
                    "Arn"
                ]
            },
            "Export": {
                "Name": "LambdaRole"
            }
        },
        "LambdaFunctionName": {
            "Value": {
                "Ref": "LambdaFunction"
            }
        },
        "LambdaFunctionARN": {
            "Description": "Lambda function ARN.",
            "Value": {
                "Fn::GetAtt": [
                    "LambdaFunction",
                    "Arn"
                ]
            },
            "Export": {
                "Name": {
                    "Fn::Sub": "LambdaARN-${EnvName}"
                }
            }
        }
    }
}
